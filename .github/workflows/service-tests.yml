name: Application Launch tests

on:
  push:
  pull_request:
    branches: [ main, dev ]

jobs:
  docker-compose-dev:
    runs-on: ubuntu-latest
    name: Test docker compose (staging)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker compose up
        run: |
          docker compose up -d --build

      - name: Wait for database to be ready
        run: |
          until docker compose exec system_db pg_isready -U postgres; do
            sleep 1
          done
          until docker compose exec filestorage_db pg_isready -U postgres; do
            sleep 1
          done
          sleep 3

      - name: Check backend health
        run: |
          curl -f http://localhost/api/openapi.json || \
          curl -f http://localhost/api/docs || \
          curl -f http://localhost/api/health || \
          (echo "Backend is not responsive" && docker compose logs backend && exit 1)

      - name: Check frontend health
        run: |
          curl -f http://localhost/ || \
          (echo "Frontend is not responsive" && docker compose logs frontend nginx && exit 1)

      - name: Docker compose down
        if: always()
        run: |
          docker compose down -v

  docker-compose-prod:
    runs-on: ubuntu-latest
    name: Test docker compose (production)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker compose up
        run: |
          docker compose -f docker-compose.prod.yml up -d --build

      - name: Wait for database to be ready
        run: |
          until docker compose -f docker-compose.prod.yml exec system_db pg_isready -U postgres; do
            sleep 1
          done
          until docker compose -f docker-compose.prod.yml exec filestorage_db pg_isready -U postgres; do
            sleep 1
          done
          sleep 3

      - name: Check backend health
        run: |
          curl -f http://localhost/api/openapi.json || \
          curl -f http://localhost/api/docs || \
          curl -f http://localhost/api/health || \
          (echo "Backend is not responsive" && docker compose -f docker-compose.prod.yml logs backend && exit 1)

      - name: Check frontend health
        run: |
          curl -f http://localhost/ || \
          (echo "Frontend is not responsive" && docker compose -f docker-compose.prod.yml logs frontend nginx && exit 1)

      - name: Docker compose down
        if: always()
        run: |
          docker compose -f docker-compose.prod.yml down -v