name: Application Launch tests

on:
  push:
  pull_request:
    branches: [ main, dev ]

jobs:
  docker-compose-dev:
    runs-on: ubuntu-latest
    name: Testing docker compose (staging)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker compose up
        run: |
          docker compose up -d --build

      - name: Wait for services to be ready
        run: |
          sleep 20
          
          if docker compose ps | grep -q "exited"; then
            echo "Some containers have exited!"
            docker compose logs
            exit 1
          fi

      - name: Check backend health
        run: |
          curl -f http://localhost:8000/openapi.json || \
          curl -f http://localhost:8000/docs || \
          curl -f http://localhost:8000/health || \
          curl -f http://localhost:8000/ || \
          (echo "Backend is not responsive" && docker compose logs backend && exit 1)

      - name: Check frontend health (if needed)
        run: |
          # Проверка фронтенда, если нужно
          curl -f http://localhost:80 || \
          curl -f http://localhost:3000 || \
          echo "Frontend check skipped"

      - name: Docker compose down
        if: always()
        run: docker compose down -v

  docker-compose-prod:
    runs-on: ubuntu-latest
    name: Testing docker compose (production)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker compose up
        run: |
          docker compose -f docker-compose.prod.yml up -d --build

      - name: Wait for services to be ready
        run: |
          sleep 20
          
          if docker compose -f docker-compose.prod.yml ps | grep -q "exited"; then
            echo "Some containers have exited!"
            docker compose -f docker-compose.prod.yml logs
            exit 1
          fi

      - name: Check backend health
        run: |
          curl -f http://localhost:8000/openapi.json || \
          curl -f http://localhost:8000/docs || \
          curl -f http://localhost:8000/health || \
          curl -f http://localhost:8000/ || \
          (echo "Backend is not responsive" && docker compose -f docker-compose.prod.yml logs backend && exit 1)

      - name: Check frontend health (if needed)
        run: |
          # Проверка фронтенда, если нужно
          curl -f http://localhost:80 || \
          curl -f http://localhost:3000 || \
          echo "Frontend check skipped"

      - name: Docker compose down
        if: always()
        run: docker compose -f docker-compose.prod.yml down -v