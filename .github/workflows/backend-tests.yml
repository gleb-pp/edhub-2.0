name: Backend tests

on:
  push:

jobs:
  backend-db-test:
    runs-on: ubuntu-latest
    name: Backend + DB Integration Test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Docker network
        run: docker network create edhub-network

      - name: Build system_db
        run: docker build -t edhub-system-db ./database/system

      - name: Build filestorage_db
        run: docker build -t edhub-filestorage-db ./database/filestorage

      - name: Build backend
        run: docker build -t edhub-backend ./backend

      - name: Run system_db container
        run: |
          docker run -d \
            --name system_db \
            --network edhub-network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=12345678 \
            -e POSTGRES_DB=edhub \
            edhub-system-db

      - name: Wait for system_db to be ready
        run: |
          echo "Waiting for system_db to be ready..."
          for i in {1..30}; do
            if docker exec system_db pg_isready -U postgres; then
              echo "system_db is ready!"
              exit 0
            fi
            echo "Waiting for system_db... ($i/30)"
            sleep 2
          done
          echo "system_db failed to start" && docker logs system_db
          exit 1

      - name: Run filestorage_db container
        run: |
          docker run -d \
            --name filestorage_db \
            --network edhub-network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=12345678 \
            -e POSTGRES_DB=edhub_storage \
            edhub-filestorage-db

      - name: Wait for filestorage_db to be ready  
        run: |
          echo "Waiting for filestorage_db to be ready..."
          for i in {1..30}; do
            if docker exec filestorage_db pg_isready -U postgres; then
              echo "filestorage_db is ready!"
              exit 0
            fi
            echo "Waiting for filestorage_db... ($i/30)"
            sleep 2
          done
          echo "filestorage_db failed to start" && docker logs filestorage_db
          exit 1

      - name: Run backend container
        run: |
          docker run -d \
            --name backend \
            --network edhub-network \
            -p 8000:8000 \
            -e DATABASE_URL=postgresql://postgres:12345678@system_db:5432/edhub \
            -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            edhub-backend

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend to be ready..."
          for i in {1..30}; do
            if curl -s -f http://localhost:8000/openapi.json >/dev/null; then
              echo "Backend is ready!"
              exit 0
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          (echo "Backend failed to start" && docker logs backend && docker logs system_db && docker logs filestorage_db && exit 1)
          exit 1

      - name: Stop containers
        if: always()
        run: |
          docker stop backend system_db filestorage_db || true
          docker rm backend system_db filestorage_db || true
          docker network rm edhub-network || true

  curltests:
    runs-on: ubuntu-latest
    name: Logical curl tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Docker network
        run: docker network create edhub-network

      - name: Build system_db
        run: docker build -t edhub-system-db ./database/system

      - name: Build filestorage_db
        run: docker build -t edhub-filestorage-db ./database/filestorage

      - name: Build backend
        run: docker build -t edhub-backend ./backend

      - name: Run system_db container
        run: |
          docker run -d \
            --name system_db \
            --network edhub-network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=12345678 \
            -e POSTGRES_DB=edhub \
            edhub-system-db

      - name: Wait for system_db to be ready
        run: |
          echo "Waiting for system_db to be ready..."
          for i in {1..30}; do
            if docker exec system_db pg_isready -U postgres; then
              echo "system_db is ready!"
              exit 0
            fi
            echo "Waiting for system_db... ($i/30)"
            sleep 2
          done
          echo "system_db failed to start" && docker logs system_db
          exit 1

      - name: Run filestorage_db container
        run: |
          docker run -d \
            --name filestorage_db \
            --network edhub-network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=12345678 \
            -e POSTGRES_DB=edhub_storage \
            edhub-filestorage-db

      - name: Wait for filestorage_db to be ready  
        run: |
          echo "Waiting for filestorage_db to be ready..."
          for i in {1..30}; do
            if docker exec filestorage_db pg_isready -U postgres; then
              echo "filestorage_db is ready!"
              exit 0
            fi
            echo "Waiting for filestorage_db... ($i/30)"
            sleep 2
          done
          echo "filestorage_db failed to start" && docker logs filestorage_db
          exit 1

      - name: Run backend container
        run: |
          docker run -d \
            --name backend \
            --network edhub-network \
            -p 8000:8000 \
            -e DATABASE_URL=postgresql://postgres:12345678@system_db:5432/edhub \
            -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            edhub-backend
      
      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if curl -s -f http://localhost:8000/openapi.json >/dev/null; then
              echo "Backend is ready!"
              exit 0
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          (echo "Backend failed to start" && docker logs backend && docker logs system_db && docker logs filestorage_db && exit 1)
          exit 1

      - name: Set up tests
        run: |
          chmod +x ./backend/tests/*.sh

      # checking registration, login, changing password, and removing account
      - name: Authorization tests
        run: |
          ./backend/tests/authorization.sh || exit 1

      # checking admin functionalities
      - name: Admin tests
        run: |
          ./backend/tests/admin.sh || exit 1

      # checking courses functionalities
      - name: Course tests
        run: |
          ./backend/tests/courses.sh || (docker logs backend && exit 1)
      
      - name: Students tests
        run: |
          ./backend/tests/students.sh || exit 1
      
      - name: Teachers tests
        run: |
          ./backend/tests/teachers.sh || exit 1

      - name: Parents tests
        run: |
          ./backend/tests/parents.sh || exit 1
      
      - name: Submissions tests
        run: |
          ./backend/tests/submissions.sh || exit 1

      - name: Grades tests
        run: |
          ./backend/tests/grades.sh || exit 1

      - name: Attachments tests
        run: |
          ./backend/tests/attachments.sh || exit 1

      - name: Stop containers
        if: always()
        run: |
          docker stop backend system_db filestorage_db || true
          docker rm backend system_db filestorage_db || true
          docker network rm edhub-network || true
